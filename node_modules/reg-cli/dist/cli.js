#!/usr/bin/env node
'use strict';

var _cliSpinner = require('cli-spinner');

var _meow = require('meow');

var _meow2 = _interopRequireDefault(_meow);

var _ = require('./');

var _2 = _interopRequireDefault(_);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

var _icon = require('./icon');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IMAGE_FILES = '/**/*.+(tiff|jpeg|jpg|gif|png|bmp)';
// import notifier from './notifier';


var spinner = new _cliSpinner.Spinner();
spinner.setSpinnerString(18);

if (!process.argv[2] || !process.argv[3] || !process.argv[4]) {
  _log2.default.fail('please specify actual, expected and diff images directory.');
  _log2.default.fail('e.g.: $ reg-cli /path/to/actual-dir /path/to/expected-dir /path/to/diff-dir');
  process.exit(1);
}

var cli = (0, _meow2.default)('\n  Usage\n    $ reg-cli /path/to/actual-dir /path/to/expected-dir /path/to/diff-dir\n  Options\n    -U, --update Update expected images.(Copy `actual images` to `expected images`).\n    -J, --json Specified json report path. If omitted ./reg.json.\n    -I, --ignoreChange If true, error will not be thrown when image change detected.\n    -R, --report Output html report to specified directory.\n    -P, --urlPrefix Add prefix to all image src.\n    -T, --thresholdRate Rate threshold for detecting change. When the difference ratio of the image is larger than the set rate detects the change.\n    -S, --thresholdPixel Pixel threshold for detecting change. When the difference pixel of the image is larger than the set pixel detects the change. This value takes precedence over `thresholdRate`.\n    -C, --concurrency How many processes launches in parallel. If omitted 4.\n    -A, --enableAntialias. Enable antialias. If omitted false.\n    -X, --additionalDetection. Enable additional difference detection(highly experimental). Select "none" or "client" (default: "none").\n  Examples\n    $ reg-cli /path/to/actual-dir /path/to/expected-dir /path/to/diff-dir -U -D ./reg.json\n', {
  alias: {
    U: 'update',
    J: 'json',
    I: 'ignoreChange',
    R: 'report',
    P: 'urlPrefix',
    T: 'thresholdRate',
    S: 'thresholdPixel',
    C: 'concurrency',
    A: 'enableAntialias',
    X: 'additionalDetection'
  }
});

var json = cli.flags.json ? cli.flags.json.toString() : './reg.json'; // default output path

var urlPrefix = typeof cli.flags.urlPrefix === 'string' ? cli.flags.urlPrefix : './';

var report = typeof cli.flags.report === 'string' ? cli.flags.report : !!cli.flags.report ? './report.html' : '';

var actualDir = process.argv[2];
var expectedDir = process.argv[3];
var diffDir = process.argv[4];
var update = !!cli.flags.update;
var ignoreChange = !!cli.flags.ignoreChange;

var observer = (0, _2.default)({
  actualDir: actualDir,
  expectedDir: expectedDir,
  diffDir: diffDir,
  update: update,
  report: report,
  json: json,
  urlPrefix: urlPrefix,
  thresholdRate: Number(cli.flags.thresholdRate),
  thresholdPixel: Number(cli.flags.thresholdPixel),
  concurrency: Number(cli.flags.concurrency) || 4,
  enableAntialias: !!cli.flags.enableAntialias,
  enableClientAdditionalDetection: cli.flags.additionalDetection === 'client'
});

observer.once('start', function () {
  return spinner.start();
});

observer.on('compare', function (_ref) {
  var type = _ref.type,
      path = _ref.path;

  spinner.stop(true);
  switch (type) {
    case 'delete':
      return _log2.default.warn(_icon.MINUS + ' delete  ' + actualDir + path);
    case 'new':
      return _log2.default.info(_icon.GREEK_CROSS + ' append  ' + actualDir + path);
    case 'pass':
      return _log2.default.success(_icon.CHECK_MARK + ' pass    ' + actualDir + path);
    case 'fail':
      return _log2.default.fail(_icon.BALLOT_X + ' change  ' + actualDir + path);
  }
  spinner.start();
});

observer.once('update', function () {
  return _log2.default.success('\u2728 your expected images are updated \u2728');
});

observer.once('complete', function (_ref2) {
  var failedItems = _ref2.failedItems,
      deletedItems = _ref2.deletedItems,
      newItems = _ref2.newItems,
      passedItems = _ref2.passedItems;

  spinner.stop(true);
  _log2.default.info('\n');
  if (failedItems.length) _log2.default.fail(_icon.BALLOT_X + ' ' + failedItems.length + ' file(s) changed.');
  if (deletedItems.length) _log2.default.warn(_icon.MINUS + ' ' + deletedItems.length + ' file(s) deleted.');
  if (newItems.length) _log2.default.info(_icon.GREEK_CROSS + ' ' + newItems.length + ' file(s) appended.');
  if (passedItems.length) _log2.default.success(_icon.CHECK_MARK + ' ' + passedItems.length + ' file(s) passed.');
  if (!update && failedItems.length > 0) {
    _log2.default.fail('\nInspect your code changes, re-run with `-U` to update them. ');
    if (!ignoreChange) process.exit(1);
  }
  return process.exit(0);
});

observer.once('error', function (error) {
  _log2.default.fail(error);
  process.exit(1);
});