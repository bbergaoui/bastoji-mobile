{
  "version": 3,
  "file": "zxing-ngx-scanner.js",
  "sources": [
    "ng://@zxing/ngx-scanner/out/app/modules/zxing-scanner/zxing-scanner.module.ts",
    "ng://@zxing/ngx-scanner/out/app/modules/zxing-scanner/zxing-scanner.component.ts",
    "ng://@zxing/ngx-scanner/out/app/modules/zxing-scanner/browser-qr-code-reader.ts",
    "ng://@zxing/ngx-scanner/out/app/modules/zxing-scanner/browser-code-reader.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ZXingScannerComponent } from './zxing-scanner.component';\r\n\r\nexport type ZXingScannerComponent = ZXingScannerComponent;\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule\r\n    ],\r\n    declarations: [ZXingScannerComponent],\r\n    exports: [ZXingScannerComponent],\r\n})\r\nexport class ZXingScannerModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: ZXingScannerModule\r\n        };\r\n    }\r\n}\r\n",
    "import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Inject,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    PLATFORM_ID,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\n\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\nimport { Result } from '@zxing/library';\r\n\r\nimport { BrowserQRCodeReader } from './browser-qr-code-reader';\r\n\r\n@Component({\r\n    // tslint:disable-next-line:component-selector\r\n    selector: 'zxing-scanner',\r\n    template: `<video [ngClass]=\"cssClass\" #preview>\r\n    <p>\r\n        Your browser does not support this feature, please try to upgrade it.\r\n    </p>\r\n    <p>\r\n        Seu navegador não suporta este recurso, por favor tente atualizá-lo.\r\n    </p>\r\n</video>\r\n`,\r\n    styles: [`:host{display:block}video{width:100%;height:auto;-o-object-fit:contain;object-fit:contain}`],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ZXingScannerComponent implements AfterViewInit, OnDestroy, OnChanges {\r\n\r\n    /**\r\n     * The ZXing code reader.\r\n     */\r\n    private codeReader: BrowserQRCodeReader;\r\n\r\n    /**\r\n     * Has `navigator` access.\r\n     */\r\n    private hasNavigator: boolean;\r\n\r\n\r\n    /**\r\n     * Says if some native API is supported.\r\n     */\r\n    private isMediaDevicesSuported: boolean;\r\n\r\n    /**\r\n     * Says if some native API is supported.\r\n     */\r\n    private isEnumerateDevicesSuported: boolean;\r\n\r\n    /**\r\n     * List of enable video-input devices.\r\n     */\r\n    private videoInputDevices: MediaDeviceInfo[];\r\n    /**\r\n     * The actual device used to scan things.\r\n     */\r\n    private videoInputDevice: MediaDeviceInfo;\r\n\r\n    /**\r\n     * Says if the user allowedthe use of the camera or not.\r\n     */\r\n    private hasPermission: boolean;\r\n\r\n    /**\r\n     * Reference to the preview element, should be the `video` tag.\r\n     */\r\n    @ViewChild('preview')\r\n    previewElemRef: ElementRef;\r\n\r\n    /**\r\n     * The scan throttling (time between scans) in milliseconds.\r\n     */\r\n    @Input()\r\n    scanThrottling = 1500;\r\n\r\n    /**\r\n     * Allow start scan or not.\r\n     */\r\n    @Input()\r\n    scannerEnabled = true;\r\n\r\n    /**\r\n     * The device that should be used to scan things.\r\n     */\r\n    @Input()\r\n    device: MediaDeviceInfo;\r\n\r\n    /**\r\n     * The value of the HTML video's class attribute.\r\n     */\r\n    @Input()\r\n    cssClass: string;\r\n\r\n    /**\r\n     * Enable or disable autofocus of the camera (might have an impact on performance)\r\n     */\r\n    @Input()\r\n    autofocusEnabled = true;\r\n\r\n    /**\r\n     * Allow start scan or not.\r\n     */\r\n    @Input()\r\n    set torch(on: boolean) {\r\n        this.codeReader.setTorch(on);\r\n    }\r\n\r\n    /**\r\n     * Emitts events when the torch compatibility is changed.\r\n     */\r\n    @Output()\r\n    torchCompatible = new EventEmitter<boolean>();\r\n\r\n    /**\r\n     * Emitts events when a scan is successful performed, will inject the string value of the QR-code to the callback.\r\n     */\r\n    @Output()\r\n    scanSuccess = new EventEmitter<string>();\r\n\r\n    /**\r\n     * Emitts events when a scan fails without errors, usefull to know how much scan tries where made.\r\n     */\r\n    @Output()\r\n    scanFailure = new EventEmitter<void>();\r\n\r\n    /**\r\n     * Emitts events when a scan throws some error, will inject the error to the callback.\r\n     */\r\n    @Output()\r\n    scanError = new EventEmitter<Error>();\r\n\r\n    /**\r\n     * Emitts events when a scan is performed, will inject the Result value of the QR-code scan (if available) to the callback.\r\n     */\r\n    @Output()\r\n    scanComplete = new EventEmitter<Result>();\r\n\r\n    /**\r\n     * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\r\n     */\r\n    @Output()\r\n    camerasFound = new EventEmitter<MediaDeviceInfo[]>();\r\n\r\n    /**\r\n     * Emitts events when no cameras are found, will inject an exception (if available) to the callback.\r\n     */\r\n    @Output()\r\n    camerasNotFound = new EventEmitter<any>();\r\n\r\n    /**\r\n     * Emitts events when the users answers for permission.\r\n     */\r\n    @Output()\r\n    permissionResponse = new EventEmitter<boolean>();\r\n\r\n    /**\r\n     * Constructor to build the object and do some DI.\r\n     */\r\n    constructor() {\r\n        this.codeReader = new BrowserQRCodeReader(1500);\r\n        this.hasNavigator = typeof navigator !== 'undefined';\r\n        this.isMediaDevicesSuported = this.hasNavigator && !!navigator.mediaDevices;\r\n        this.isEnumerateDevicesSuported = !!(this.isMediaDevicesSuported && navigator.mediaDevices.enumerateDevices);\r\n    }\r\n\r\n    /**\r\n     * Manages the bindinded property changes.\r\n     * @param changes\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n\r\n        if (changes.scannerEnabled) {\r\n            if (!this.scannerEnabled) {\r\n                this.resetScan();\r\n            } else if (this.videoInputDevice) {\r\n                this.scan(this.videoInputDevice.deviceId);\r\n            }\r\n        }\r\n\r\n        if (changes.device) {\r\n            if (this.device) {\r\n                this.changeDevice(this.device);\r\n            } else {\r\n                console.warn('zxing-scanner', 'device', 'Unselected device.');\r\n                this.resetScan();\r\n            }\r\n        }\r\n\r\n        if (changes.scanThrottling) {\r\n            this.setCodeReaderThrottling(this.scanThrottling);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executed after the view initialization.\r\n     */\r\n    ngAfterViewInit(): void {\r\n\r\n        // Chrome 63 fix\r\n        if (!this.previewElemRef) {\r\n            console.warn('zxing-scanner', 'Preview element not found!');\r\n            return;\r\n        }\r\n\r\n        // iOS 11 Fix\r\n        this.previewElemRef.nativeElement.setAttribute('autoplay', false);\r\n        this.previewElemRef.nativeElement.setAttribute('muted', true);\r\n        this.previewElemRef.nativeElement.setAttribute('playsinline', true);\r\n        this.previewElemRef.nativeElement.setAttribute('autofocus', this.autofocusEnabled);\r\n\r\n        this.askForPermission().subscribe((hasPermission: boolean) => {\r\n\r\n            if (hasPermission) {\r\n\r\n                // gets and enumerates all video devices\r\n                this.enumarateVideoDevices((videoInputDevices: MediaDeviceInfo[]) => {\r\n\r\n                    if (videoInputDevices && videoInputDevices.length > 0) {\r\n                        this.camerasFound.next(videoInputDevices);\r\n                    } else {\r\n                        this.camerasNotFound.next();\r\n                    }\r\n\r\n                });\r\n\r\n                this.startScan(this.videoInputDevice);\r\n\r\n                this.codeReader.torchAvailable.subscribe((value: boolean) => {\r\n                    this.torchCompatible.emit(value);\r\n                });\r\n\r\n            } else {\r\n\r\n                if (hasPermission === false) {\r\n                    console.warn('zxing-scanner', 'ngAfterViewInit', 'User has denied permission.');\r\n                } else {\r\n                    console.warn('zxing-scanner', 'ngAfterViewInit', 'It was not possible to check for permissions.');\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Executes some actions before destroy the component.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.resetScan();\r\n    }\r\n\r\n    /**\r\n     * Starts a new QR-scanner to set a new scan throttling.\r\n     *\r\n     * @param throttling The scan speed in milliseconds.\r\n     */\r\n    setCodeReaderThrottling(throttling: number): void {\r\n        this.codeReader = new BrowserQRCodeReader(throttling);\r\n        this.restartScan();\r\n    }\r\n\r\n    /**\r\n     * Properly changes the actual target device.\r\n     *\r\n     * @param device\r\n     */\r\n    changeDevice(device: MediaDeviceInfo): void {\r\n        this.videoInputDevice = device;\r\n        this.startScan(device);\r\n    }\r\n\r\n    /**\r\n     * Properly changes the actual target device using it's deviceId.\r\n     *\r\n     * @param deviceId\r\n     */\r\n    changeDeviceById(deviceId: string): void {\r\n        this.changeDevice(this.getDeviceById(deviceId));\r\n    }\r\n\r\n    /**\r\n     * Properly returns the target device using it's deviceId.\r\n     *\r\n     * @param deviceId\r\n     */\r\n    getDeviceById(deviceId: string): MediaDeviceInfo {\r\n        return this.videoInputDevices.find(device => device.deviceId === deviceId);\r\n    }\r\n\r\n    /**\r\n     * Sets the permission value and emmits the event.\r\n     */\r\n    private setPermission(hasPermission: boolean | undefined): EventEmitter<boolean> {\r\n        this.hasPermission = hasPermission;\r\n        this.permissionResponse.next(hasPermission);\r\n        return this.permissionResponse;\r\n    }\r\n\r\n    /**\r\n     * Gets and registers all cammeras.\r\n     */\r\n    askForPermission(): EventEmitter<boolean> {\r\n\r\n        if (!this.hasNavigator) {\r\n            console.error('zxing-scanner', 'askForPermission', 'Can\\'t ask permission, navigator is not present.');\r\n            return this.setPermission(undefined);\r\n        }\r\n\r\n        if (!this.isMediaDevicesSuported) {\r\n            console.error('zxing-scanner', 'askForPermission', 'Can\\'t get user media, this is not supported.');\r\n            return this.setPermission(undefined);\r\n        }\r\n\r\n        // Will try to ask for permission\r\n        navigator\r\n            .mediaDevices\r\n            .getUserMedia({ audio: false, video: true })\r\n            .then((stream: MediaStream) => {\r\n\r\n                try {\r\n\r\n                    // Start stream so Browser can display its permission-dialog\r\n                    this.codeReader.bindVideoSrc(this.previewElemRef.nativeElement, stream);\r\n\r\n                    // After permission was granted, we can stop it again\r\n                    stream.getVideoTracks().forEach(track => {\r\n                        track.stop();\r\n                    });\r\n\r\n                    // should stop the opened stream\r\n                    this.codeReader.unbindVideoSrc(this.previewElemRef.nativeElement);\r\n\r\n                    // if the scripts lives until here, that's only one mean:\r\n\r\n                    // permission granted\r\n                    this.setPermission(true);\r\n\r\n                } catch (err) {\r\n\r\n                    console.error('zxing-scanner', 'askForPermission', err);\r\n\r\n                    // permission aborted\r\n                    this.setPermission(undefined);\r\n                }\r\n\r\n            })\r\n            .catch((err: DOMException) => {\r\n\r\n                // failed to grant permission to video input\r\n\r\n                console.warn('zxing-scanner', 'askForPermission', err);\r\n\r\n                switch (err.name) {\r\n\r\n                    case 'NotAllowedError':\r\n                        // permission denied\r\n                        this.setPermission(false);\r\n                        break;\r\n\r\n                    case 'NotFoundError':\r\n                        this.camerasNotFound.next(err);\r\n                        break;\r\n\r\n                    default:\r\n                        this.setPermission(undefined);\r\n                        break;\r\n\r\n                }\r\n\r\n            });\r\n\r\n        // Returns the event emitter, so the dev can subscribe to it\r\n        return this.permissionResponse;\r\n    }\r\n\r\n    /**\r\n     * Starts the continuous scanning for the given device.\r\n     *\r\n     * @param deviceId The deviceId from the device.\r\n     */\r\n    scan(deviceId: string): void {\r\n        try {\r\n\r\n            this.codeReader.decodeFromInputVideoDevice((result: any) => {\r\n\r\n                if (result) {\r\n                    this.dispatchScanSuccess(result);\r\n                } else {\r\n                    this.dispatchScanFailure();\r\n                }\r\n\r\n                this.dispatchScanComplete(result);\r\n\r\n            }, deviceId, this.previewElemRef.nativeElement);\r\n\r\n        } catch (err) {\r\n            this.dispatchScanError(err);\r\n            this.dispatchScanComplete(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the scanning if allowed.\r\n     *\r\n     * @param device The device to be used in the scan.\r\n     */\r\n    startScan(device: MediaDeviceInfo): void {\r\n        if (this.scannerEnabled && device) {\r\n            this.scan(device.deviceId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops the scan service.\r\n     */\r\n    resetScan(): void {\r\n        this.codeReader.reset();\r\n    }\r\n\r\n    /**\r\n     * Stops and starts back the scan.\r\n     */\r\n    restartScan(): void {\r\n        this.restartScan();\r\n        this.startScan(this.device);\r\n    }\r\n\r\n    /**\r\n     * Dispatches the scan success event.\r\n     *\r\n     * @param result the scan result.\r\n     */\r\n    private dispatchScanSuccess(result: Result): void {\r\n        this.scanSuccess.next(result.getText());\r\n    }\r\n\r\n    /**\r\n     * Dispatches the scan failure event.\r\n     */\r\n    private dispatchScanFailure(): void {\r\n        this.scanFailure.next();\r\n    }\r\n\r\n    /**\r\n     * Dispatches the scan error event.\r\n     *\r\n     * @param err the error thing.\r\n     */\r\n    private dispatchScanError(error: any): void {\r\n        this.scanError.next(error);\r\n    }\r\n\r\n    /**\r\n     * Dispatches the scan event.\r\n     *\r\n     * @param result the scan result.\r\n     */\r\n    private dispatchScanComplete(result: Result): void {\r\n        this.scanComplete.next(result);\r\n    }\r\n\r\n    /**\r\n     * Enumerates all the available devices.\r\n     *\r\n     * @param successCallback\r\n     */\r\n    enumarateVideoDevices(successCallback: any): void {\r\n\r\n        if (!this.hasNavigator) {\r\n            console.error('zxing-scanner', 'enumarateVideoDevices', 'Can\\'t enumerate devices, navigator is not present.');\r\n            return;\r\n        }\r\n\r\n        if (!this.isEnumerateDevicesSuported) {\r\n            console.error('zxing-scanner', 'enumarateVideoDevices', 'Can\\'t enumerate devices, method not supported.');\r\n            return;\r\n        }\r\n\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]) => {\r\n\r\n            this.videoInputDevices = [];\r\n\r\n            for (const deviceI of devices) {\r\n\r\n                // @todo type this as `MediaDeviceInfo`\r\n                const device: any = {};\r\n\r\n                // tslint:disable-next-line:forin\r\n                for (const key in deviceI) {\r\n                    device[key] = deviceI[key];\r\n                }\r\n\r\n                if (device.kind === 'video') {\r\n                    device.kind = 'videoinput';\r\n                }\r\n\r\n                if (!device.deviceId) {\r\n                    device.deviceId = (<any>device).id;\r\n                }\r\n\r\n                if (!device.label) {\r\n                    device.label = 'Camera (no-permission)';\r\n                }\r\n\r\n                if (device.kind === 'videoinput') {\r\n                    this.videoInputDevices.push(device);\r\n                }\r\n            }\r\n\r\n            successCallback(this.videoInputDevices);\r\n        });\r\n    }\r\n}\r\n",
    "import { QRCodeReader } from '@zxing/library';\r\n\r\nimport { BrowserCodeReader } from './browser-code-reader';\r\n\r\nexport class BrowserQRCodeReader extends BrowserCodeReader {\r\n    public constructor(timeBetweenScansMillis: number = 500) {\r\n        super(new QRCodeReader(), timeBetweenScansMillis);\r\n    }\r\n}\r\n",
    "/// <reference path=\"./image-capture.d.ts\" />\r\n\r\nimport {\r\n    Reader,\r\n    BinaryBitmap,\r\n    HybridBinarizer,\r\n    Result,\r\n    Exception,\r\n    HTMLCanvasElementLuminanceSource,\r\n} from '@zxing/library';\r\n\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n/**\r\n * Based on zxing-typescript BrowserCodeReader\r\n */\r\nexport class BrowserCodeReader {\r\n\r\n    /**\r\n     * The HTML video element, used to display the camera stream.\r\n     */\r\n    private videoElement: HTMLVideoElement;\r\n    /**\r\n     * Should contain the actual registered listener for video play-ended,\r\n     * used to unregister that listener when needed.\r\n     */\r\n    private videoPlayEndedEventListener: EventListener;\r\n    /**\r\n     * Should contain the actual registered listener for video playing,\r\n     * used to unregister that listener when needed.\r\n     */\r\n    private videoPlayingEventListener: EventListener;\r\n    /**\r\n     * Should contain the actual registered listener for video loaded-metadata,\r\n     * used to unregister that listener when needed.\r\n     */\r\n    private videoLoadedMetadataEventListener: EventListener;\r\n\r\n    /**\r\n     * The HTML image element, used as a fallback for the video element when decoding.\r\n     */\r\n    private imageElement: HTMLImageElement;\r\n    /**\r\n     * Should contain the actual registered listener for image loading,\r\n     * used to unregister that listener when needed.\r\n     */\r\n    private imageLoadedEventListener: EventListener;\r\n\r\n    /**\r\n     * The HTML canvas element, used to draw the video or image's frame for decoding.\r\n     */\r\n    private canvasElement: HTMLCanvasElement;\r\n    /**\r\n     * The HTML canvas element context.\r\n     */\r\n    private canvasElementContext: CanvasRenderingContext2D;\r\n\r\n    /**\r\n     * The continuous scan timeout Id.\r\n     */\r\n    private timeoutHandler: number;\r\n\r\n    /**\r\n     * The stream output from camera.\r\n     */\r\n    private stream: MediaStream;\r\n    /**\r\n     * The track from camera.\r\n     */\r\n    private track: MediaStreamTrack;\r\n    /**\r\n     * Shows if torch is available on the camera.\r\n     */\r\n    private torchCompatible = new BehaviorSubject<boolean>(false);\r\n    /**\r\n     * The device id of the current media device.\r\n     */\r\n    private deviceId: string;\r\n\r\n    /**\r\n     * Constructor for dependency injection.\r\n     *\r\n     * @param reader The barcode reader to be used to decode the stream.\r\n     * @param timeBetweenScans The scan throttling in milliseconds.\r\n     */\r\n    public constructor(private reader: Reader, private timeBetweenScans: number = 500) { }\r\n\r\n    /**\r\n     * Starts the decoding from the actual or a new video element.\r\n     *\r\n     * @param callbackFn The callback to be executed after every scan attempt\r\n     * @param deviceId The device's to be used Id\r\n     * @param videoElement A new video element\r\n     */\r\n    public decodeFromInputVideoDevice(callbackFn?: (result: Result) => any, deviceId?: string, videoElement?: HTMLVideoElement): void {\r\n\r\n        if (deviceId !== undefined) {\r\n            this.deviceId = deviceId;\r\n        }\r\n\r\n        this.reset();\r\n\r\n        this.prepareVideoElement(videoElement);\r\n\r\n        const video = this.deviceId === undefined\r\n            ? { facingMode: { exact: 'environment' } }\r\n            : { deviceId: { exact: this.deviceId } };\r\n\r\n        const constraints: MediaStreamConstraints = {\r\n            audio: false,\r\n            video\r\n        };\r\n\r\n        if (typeof navigator !== 'undefined') {\r\n            navigator\r\n                .mediaDevices\r\n                .getUserMedia(constraints)\r\n                .then((stream: MediaStream) => this.startDecodeFromStream(stream, callbackFn))\r\n                .catch((err: any) => {\r\n                    /* handle the error, or not */\r\n                    console.error(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the new stream and request a new decoding-with-delay.\r\n     *\r\n     * @param stream The stream to be shown in the video element.\r\n     * @param callbackFn A callback for the decode method.\r\n     */\r\n    private startDecodeFromStream(stream: MediaStream, callbackFn?: (result: Result) => any): void {\r\n        this.stream = stream;\r\n        this.bindVideoSrc(this.videoElement, this.stream);\r\n        this.bindEvents(this.videoElement, callbackFn);\r\n        this.checkTorchCompatibility(this.stream);\r\n    }\r\n\r\n    /**\r\n     * Defines what the videoElement src will be.\r\n     *\r\n     * @param videoElement\r\n     * @param stream\r\n     */\r\n    public bindVideoSrc(videoElement: HTMLVideoElement, stream: MediaStream): void {\r\n        // Older browsers may not have `srcObject`\r\n        try {\r\n            // @NOTE Throws Exception if interrupted by a new loaded request\r\n            videoElement.srcObject = stream;\r\n        } catch (err) {\r\n            // @NOTE Avoid using this in new browsers, as it is going away.\r\n            videoElement.src = window.URL.createObjectURL(stream);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unbinds a HTML video src property.\r\n     *\r\n     * @param videoElement\r\n     */\r\n    public unbindVideoSrc(videoElement: HTMLVideoElement): void {\r\n        try {\r\n            videoElement.srcObject = null;\r\n        } catch (err) {\r\n            videoElement.src = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds listeners and callbacks to the videoElement.\r\n     *\r\n     * @param videoElement\r\n     * @param callbackFn\r\n     */\r\n    private bindEvents(videoElement: HTMLVideoElement, callbackFn?: (result: Result) => any): void {\r\n        if (callbackFn !== undefined) {\r\n            this.videoPlayingEventListener = () => {\r\n                this.decodeWithDelay(callbackFn);\r\n            };\r\n        }\r\n\r\n        videoElement.addEventListener('playing', this.videoPlayingEventListener);\r\n\r\n        this.videoLoadedMetadataEventListener = () => {\r\n            videoElement.play();\r\n        };\r\n\r\n        videoElement.addEventListener('loadedmetadata', this.videoLoadedMetadataEventListener);\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream supports torch control.\r\n     *\r\n     * @param stream The media stream used to check.\r\n     */\r\n    private checkTorchCompatibility(stream: MediaStream): void {\r\n        try {\r\n            this.track = stream.getVideoTracks()[0];\r\n\r\n            const imageCapture = new ImageCapture(this.track);\r\n\r\n            const photoCapabilities = imageCapture.getPhotoCapabilities().then((capabilities) => {\r\n                const compatible = !!capabilities.torch || ('fillLightMode' in capabilities && capabilities.fillLightMode.length !== 0);\r\n                this.torchCompatible.next(compatible);\r\n            });\r\n        } catch (err) {\r\n            this.torchCompatible.next(false);\r\n        }\r\n    }\r\n\r\n    public setTorch(on: boolean): void {\r\n        if (this.torchCompatible.value) {\r\n            if (on) {\r\n                this.track.applyConstraints({\r\n                    advanced: [<any>{ torch: true }]\r\n                });\r\n            } else {\r\n                this.restart();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get torchAvailable(): Observable<boolean> {\r\n        return this.torchCompatible.asObservable();\r\n    }\r\n\r\n    /**\r\n     * Sets a HTMLVideoElement for scanning or creates a new one.\r\n     *\r\n     * @param videoElement The HTMLVideoElement to be set.\r\n     */\r\n    private prepareVideoElement(videoElement?: HTMLVideoElement): void {\r\n\r\n        if (!videoElement && typeof document !== 'undefined') {\r\n            videoElement = document.createElement('video');\r\n            videoElement.width = 200;\r\n            videoElement.height = 200;\r\n        }\r\n\r\n        this.videoElement = videoElement;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param callbackFn\r\n     */\r\n    private decodeWithDelay(callbackFn: (result: Result) => any): void {\r\n        this.timeoutHandler = window.setTimeout(this.decode.bind(this, callbackFn), this.timeBetweenScans);\r\n    }\r\n\r\n    /**\r\n     * Does the real image decoding job.\r\n     *\r\n     * @param callbackFn\r\n     * @param retryIfNotFound\r\n     * @param retryIfChecksumOrFormatError\r\n     * @param once\r\n     */\r\n    private decode(\r\n        callbackFn: (result: Result) => any,\r\n        retryIfNotFound: boolean = true,\r\n        retryIfChecksumOrFormatError: boolean = true,\r\n        once = false\r\n    ): void {\r\n\r\n        if (undefined === this.canvasElementContext) {\r\n            this.prepareCaptureCanvas();\r\n        }\r\n\r\n        this.canvasElementContext.drawImage(this.videoElement || this.imageElement, 0, 0);\r\n\r\n        const luminanceSource = new HTMLCanvasElementLuminanceSource(this.canvasElement);\r\n        const binaryBitmap = new BinaryBitmap(new HybridBinarizer(luminanceSource));\r\n\r\n        try {\r\n\r\n            const result = this.reader.decode(binaryBitmap);\r\n\r\n            callbackFn(result);\r\n\r\n            if (!once && !!this.stream) {\r\n                this.decodeWithDelay(callbackFn);\r\n            }\r\n\r\n        } catch (re) {\r\n\r\n            // console.debug(retryIfChecksumOrFormatError, re);\r\n\r\n            if (retryIfNotFound && Exception.isOfType(re, Exception.NotFoundException)) {\r\n\r\n                // console.debug('zxing-scanner', 'QR-code not-found, trying again...');\r\n\r\n                this.decodeWithDelay(callbackFn);\r\n\r\n            } else if (\r\n                retryIfChecksumOrFormatError &&\r\n                (\r\n                    Exception.isOfType(re, Exception.ChecksumException) ||\r\n                    Exception.isOfType(re, Exception.FormatException)\r\n                )\r\n            ) {\r\n                console.warn('zxing-scanner', 'Checksum or format error, trying again...', re);\r\n\r\n                this.decodeWithDelay(callbackFn);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 🖌 Prepares the canvas for capture and scan frames.\r\n     */\r\n    private prepareCaptureCanvas(): void {\r\n\r\n        if (typeof document === 'undefined') {\r\n\r\n            this.canvasElement = undefined;\r\n            this.canvasElementContext = undefined;\r\n\r\n            return;\r\n        }\r\n\r\n        const canvasElement = document.createElement('canvas');\r\n\r\n        let width: number;\r\n        let height: number;\r\n\r\n        if (this.videoElement !== undefined) {\r\n            width = this.videoElement.videoWidth;\r\n            height = this.videoElement.videoHeight;\r\n        } else {\r\n            width = this.imageElement.naturalWidth || this.imageElement.width;\r\n            height = this.imageElement.naturalHeight || this.imageElement.height;\r\n        }\r\n\r\n        canvasElement.style.width = width + 'px';\r\n        canvasElement.style.height = height + 'px';\r\n        canvasElement.width = width;\r\n        canvasElement.height = height;\r\n\r\n        this.canvasElement = canvasElement;\r\n        this.canvasElementContext = canvasElement.getContext('2d');\r\n    }\r\n\r\n    /**\r\n     * Stops the continuous scan and cleans the stream.\r\n     */\r\n    private stop(): void {\r\n\r\n        if (this.timeoutHandler) {\r\n            window.clearTimeout(this.timeoutHandler);\r\n            this.timeoutHandler = null;\r\n        }\r\n\r\n        if (this.stream) {\r\n            this.stream.getTracks()[0].stop();\r\n            this.stream = null;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Resets the scanner and it's configurations.\r\n     */\r\n    public reset(): void {\r\n\r\n        // stops the camera, preview and scan 🔴\r\n\r\n        this.stop();\r\n\r\n        if (this.videoElement) {\r\n\r\n            // first gives freedon to the element 🕊\r\n\r\n            if (undefined !== this.videoPlayEndedEventListener) {\r\n                this.videoElement.removeEventListener('ended', this.videoPlayEndedEventListener);\r\n            }\r\n\r\n            if (undefined !== this.videoPlayingEventListener) {\r\n                this.videoElement.removeEventListener('playing', this.videoPlayingEventListener);\r\n            }\r\n\r\n            if (undefined !== this.videoLoadedMetadataEventListener) {\r\n                this.videoElement.removeEventListener('loadedmetadata', this.videoLoadedMetadataEventListener);\r\n            }\r\n\r\n            if (this.stream) {\r\n                try {\r\n                    this.stream.getVideoTracks().forEach(track => {\r\n                        track.stop();\r\n                    });\r\n                } catch (err) {\r\n\r\n                }\r\n            }\r\n\r\n            // then forgets about that element 😢\r\n\r\n            this.unbindVideoSrc(this.videoElement);\r\n\r\n            this.videoElement.removeAttribute('src');\r\n            this.videoElement = undefined;\r\n        }\r\n\r\n        if (this.imageElement) {\r\n\r\n            // first gives freedon to the element 🕊\r\n\r\n            if (undefined !== this.videoPlayEndedEventListener) {\r\n                this.imageElement.removeEventListener('load', this.imageLoadedEventListener);\r\n            }\r\n\r\n            // then forgets about that element 😢\r\n\r\n            this.imageElement.src = undefined;\r\n            this.imageElement.removeAttribute('src');\r\n            this.imageElement = undefined;\r\n        }\r\n\r\n        // cleans canvas references 🖌\r\n\r\n        this.canvasElementContext = undefined;\r\n        this.canvasElement = undefined;\r\n    }\r\n\r\n    private restart(): void {\r\n        // reset\r\n        // start\r\n        this.decodeFromInputVideoDevice(undefined, undefined, this.videoElement);\r\n    }\r\n}\r\n"
  ],
  "names": [
    "tslib_1.__values",
    "tslib_1.__extends"
  ],
  "mappings": "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"
}
